// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTrip {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createTrip(data: TripCreateInput!): Trip!
  updateTrip(data: TripUpdateInput!, where: TripWhereUniqueInput!): Trip
  updateManyTrips(data: TripUpdateManyMutationInput!, where: TripWhereInput): BatchPayload!
  upsertTrip(where: TripWhereUniqueInput!, create: TripCreateInput!, update: TripUpdateInput!): Trip!
  deleteTrip(where: TripWhereUniqueInput!): Trip
  deleteManyTrips(where: TripWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  trip(where: TripWhereUniqueInput!): Trip
  trips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip]!
  tripsConnection(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TripConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  trip(where: TripSubscriptionWhereInput): TripSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Trip {
  id: ID!
  user: User!
  name: String
  enabled: Boolean!
  notify_at: DateTime!
  start: DateTime!
  end: DateTime!
  from_lat: Float!
  from_lon: Float!
  to_lat: Float!
  to_lon: Float!
  forecast: Json
}

type TripConnection {
  pageInfo: PageInfo!
  edges: [TripEdge]!
  aggregate: AggregateTrip!
}

input TripCreateInput {
  id: ID
  user: UserCreateOneWithoutTripsInput!
  name: String
  enabled: Boolean!
  notify_at: DateTime!
  start: DateTime!
  end: DateTime!
  from_lat: Float!
  from_lon: Float!
  to_lat: Float!
  to_lon: Float!
  forecast: Json
}

input TripCreateManyWithoutUserInput {
  create: [TripCreateWithoutUserInput!]
  connect: [TripWhereUniqueInput!]
}

input TripCreateWithoutUserInput {
  id: ID
  name: String
  enabled: Boolean!
  notify_at: DateTime!
  start: DateTime!
  end: DateTime!
  from_lat: Float!
  from_lon: Float!
  to_lat: Float!
  to_lon: Float!
  forecast: Json
}

type TripEdge {
  node: Trip!
  cursor: String!
}

enum TripOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  enabled_ASC
  enabled_DESC
  notify_at_ASC
  notify_at_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  from_lat_ASC
  from_lat_DESC
  from_lon_ASC
  from_lon_DESC
  to_lat_ASC
  to_lat_DESC
  to_lon_ASC
  to_lon_DESC
  forecast_ASC
  forecast_DESC
}

type TripPreviousValues {
  id: ID!
  name: String
  enabled: Boolean!
  notify_at: DateTime!
  start: DateTime!
  end: DateTime!
  from_lat: Float!
  from_lon: Float!
  to_lat: Float!
  to_lon: Float!
  forecast: Json
}

input TripScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  enabled: Boolean
  enabled_not: Boolean
  notify_at: DateTime
  notify_at_not: DateTime
  notify_at_in: [DateTime!]
  notify_at_not_in: [DateTime!]
  notify_at_lt: DateTime
  notify_at_lte: DateTime
  notify_at_gt: DateTime
  notify_at_gte: DateTime
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  from_lat: Float
  from_lat_not: Float
  from_lat_in: [Float!]
  from_lat_not_in: [Float!]
  from_lat_lt: Float
  from_lat_lte: Float
  from_lat_gt: Float
  from_lat_gte: Float
  from_lon: Float
  from_lon_not: Float
  from_lon_in: [Float!]
  from_lon_not_in: [Float!]
  from_lon_lt: Float
  from_lon_lte: Float
  from_lon_gt: Float
  from_lon_gte: Float
  to_lat: Float
  to_lat_not: Float
  to_lat_in: [Float!]
  to_lat_not_in: [Float!]
  to_lat_lt: Float
  to_lat_lte: Float
  to_lat_gt: Float
  to_lat_gte: Float
  to_lon: Float
  to_lon_not: Float
  to_lon_in: [Float!]
  to_lon_not_in: [Float!]
  to_lon_lt: Float
  to_lon_lte: Float
  to_lon_gt: Float
  to_lon_gte: Float
  AND: [TripScalarWhereInput!]
  OR: [TripScalarWhereInput!]
  NOT: [TripScalarWhereInput!]
}

type TripSubscriptionPayload {
  mutation: MutationType!
  node: Trip
  updatedFields: [String!]
  previousValues: TripPreviousValues
}

input TripSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TripWhereInput
  AND: [TripSubscriptionWhereInput!]
  OR: [TripSubscriptionWhereInput!]
  NOT: [TripSubscriptionWhereInput!]
}

input TripUpdateInput {
  user: UserUpdateOneRequiredWithoutTripsInput
  name: String
  enabled: Boolean
  notify_at: DateTime
  start: DateTime
  end: DateTime
  from_lat: Float
  from_lon: Float
  to_lat: Float
  to_lon: Float
  forecast: Json
}

input TripUpdateManyDataInput {
  name: String
  enabled: Boolean
  notify_at: DateTime
  start: DateTime
  end: DateTime
  from_lat: Float
  from_lon: Float
  to_lat: Float
  to_lon: Float
  forecast: Json
}

input TripUpdateManyMutationInput {
  name: String
  enabled: Boolean
  notify_at: DateTime
  start: DateTime
  end: DateTime
  from_lat: Float
  from_lon: Float
  to_lat: Float
  to_lon: Float
  forecast: Json
}

input TripUpdateManyWithoutUserInput {
  create: [TripCreateWithoutUserInput!]
  delete: [TripWhereUniqueInput!]
  connect: [TripWhereUniqueInput!]
  set: [TripWhereUniqueInput!]
  disconnect: [TripWhereUniqueInput!]
  update: [TripUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TripUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TripScalarWhereInput!]
  updateMany: [TripUpdateManyWithWhereNestedInput!]
}

input TripUpdateManyWithWhereNestedInput {
  where: TripScalarWhereInput!
  data: TripUpdateManyDataInput!
}

input TripUpdateWithoutUserDataInput {
  name: String
  enabled: Boolean
  notify_at: DateTime
  start: DateTime
  end: DateTime
  from_lat: Float
  from_lon: Float
  to_lat: Float
  to_lon: Float
  forecast: Json
}

input TripUpdateWithWhereUniqueWithoutUserInput {
  where: TripWhereUniqueInput!
  data: TripUpdateWithoutUserDataInput!
}

input TripUpsertWithWhereUniqueWithoutUserInput {
  where: TripWhereUniqueInput!
  update: TripUpdateWithoutUserDataInput!
  create: TripCreateWithoutUserInput!
}

input TripWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  enabled: Boolean
  enabled_not: Boolean
  notify_at: DateTime
  notify_at_not: DateTime
  notify_at_in: [DateTime!]
  notify_at_not_in: [DateTime!]
  notify_at_lt: DateTime
  notify_at_lte: DateTime
  notify_at_gt: DateTime
  notify_at_gte: DateTime
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  from_lat: Float
  from_lat_not: Float
  from_lat_in: [Float!]
  from_lat_not_in: [Float!]
  from_lat_lt: Float
  from_lat_lte: Float
  from_lat_gt: Float
  from_lat_gte: Float
  from_lon: Float
  from_lon_not: Float
  from_lon_in: [Float!]
  from_lon_not_in: [Float!]
  from_lon_lt: Float
  from_lon_lte: Float
  from_lon_gt: Float
  from_lon_gte: Float
  to_lat: Float
  to_lat_not: Float
  to_lat_in: [Float!]
  to_lat_not_in: [Float!]
  to_lat_lt: Float
  to_lat_lte: Float
  to_lat_gt: Float
  to_lat_gte: Float
  to_lon: Float
  to_lon_not: Float
  to_lon_in: [Float!]
  to_lon_not_in: [Float!]
  to_lon_lt: Float
  to_lon_lte: Float
  to_lon_gt: Float
  to_lon_gte: Float
  AND: [TripWhereInput!]
  OR: [TripWhereInput!]
  NOT: [TripWhereInput!]
}

input TripWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  password: String!
  trips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  trips: TripCreateManyWithoutUserInput
}

input UserCreateOneWithoutTripsInput {
  create: UserCreateWithoutTripsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTripsInput {
  id: ID
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  trips: TripUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutTripsInput {
  create: UserCreateWithoutTripsInput
  update: UserUpdateWithoutTripsDataInput
  upsert: UserUpsertWithoutTripsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutTripsDataInput {
  email: String
  password: String
}

input UserUpsertWithoutTripsInput {
  update: UserUpdateWithoutTripsDataInput!
  create: UserCreateWithoutTripsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  trips_every: TripWhereInput
  trips_some: TripWhereInput
  trips_none: TripWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`